---
title: "Post Simulation"
format: html
---

## get the library
```{r}
library(tidyverse)
library(data.table)
library(janitor)
library(arrow)
library(ggbump)

```


## get the files
```{r}
# raw_data <- fread("no2_export_people.csv", quote = "") |> 
#   as_tibble() |> 
#   clean_names() |> 
#   mutate(where = if_else(tick %% 2 == 0, "Home", "Work"))

raw_data <- read_parquet("no2.parquet") |> 
  as_tibble() |> 
  clean_names() |> 
  mutate(where = if_else(tick %% 2 == 0, "Home", "Work"))

# Example data frame
df <- data.frame(tick = 0:2190)

# Mutate to add a date column
df <- df %>%
  mutate(date = as.Date("2019-01-01") + days(tick %/% 2))

raw_data |> 
  left_join(df, by = "tick") -> results

```

```{r}
results |> 
  filter(who == 3727) |> 
  with(plot(tick,no2, type = "l"))


results |> 
  filter(who == 4897) |> 
  with(plot(tick,no2, type = "l"))

results |> 
  filter(who == 1294) |> 
  with(plot(tick,no2, type = "l"))

```


## Descriptive Statistics
```{r}
results |> 
  mutate(dt_month= month(date)) |> 
  group_by(dt_month, where) |> 
  summarise(no2 = mean(no2, na.rm = T)) |> 
  pivot_wider(names_from = dt_month, values_from = no2)

results |> 
  mutate(dt_month= month(date),
         dt_year = year(date)) |> 
  group_by(dt_year, dt_month, where) |> 
  summarise(no2 = mean(no2, na.rm = T)) 


results |> 
  mutate(dt_month= month(date),
         dt_year = year(date)) |> 
  group_by(where, date = floor_date(date, "month")) %>%
  summarise(no2 = mean(no2, na.rm = TRUE)) %>%
  ggplot() +
  geom_line(aes(x=date, y = no2, group = where, colour = where), linewidth = 1) +
  #geom_hline(yintercept=40, linetype = "dotted", alpha = .5) +
  labs(x="", y="Mean NO2") +
  scale_x_date(date_labels = "%b\n%Y") +
  theme_bw() +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        legend.text=element_text(size=9),
        text = element_text(size=15),
        axis.text.x = element_text(size = 10),
        legend.margin=margin(t=-25)) 

ggsave("exposure.jpg", width = 5, height = 3)



results |> 
  mutate(dt_month= month(date),
         dt_year = year(date)) |> 
  group_by(where, date = floor_date(date, "bimonth"), imd_decile) %>%
  summarise(no2 = mean(no2, na.rm = TRUE)) %>%
  filter(imd_decile != 0 ) |> 
  ggplot() +
  geom_line(aes(x=date, y = no2, group = factor(imd_decile), colour = factor(imd_decile)), linewidth = 1) +
  labs(x="", y="Mean NO2") +
  scale_x_date(date_labels = "%b\n%Y") +
  facet_wrap(~where) +
  theme_bw() +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        legend.text=element_text(size=13),
        text = element_text(size=15),
        axis.text.x = element_text(size = 10),
        legend.margin=margin(t=-25)) 

ggsave("exposure_imd.jpg", width = 9, height = 4)

```




https://en.wikipedia.org/wiki/List_of_sub-regions_used_in_the_London_Plan


```{r}
results |> 
  mutate(dt_month= month(date),
         dt_year = year(date)) |> 
  mutate(
    home_cat = case_when(
      origin %in% c("Southwark", "Lambeth", "Wandsworth", "Lewisham",
                          "Hammersmith and Fulham", "Kensington and Chelsea", "Haringey", "Tower Hamlets", "Newham",
                          "Westminster", "Camden", "Islington", "Hackney") ~ "Inner London",
      origin %in% c("Enfield", "Waltham Forest", "Barnet", "Brent", "Harrow", "Ealing", "Hounslow", "Hillingdon",
                          "Richmond upon Thames", "Kingston upon Thames", "Merton", "Sutton",
                          "Waltham Forest", "Redbridge", "Barking and Dagenham", "Havering", "Greenwich", 
                          "Bexley", "Bromley", "Croydon") ~ "Outer London",
      TRUE ~ NA_character_),
    
    work_cat = case_when(
      destination %in% c("Southwark", "Lambeth", "Wandsworth", "Lewisham",
                             "Hammersmith and Fulham", "Kensington and Chelsea", "Haringey", "Tower Hamlets", "Newham",
                             "Westminster", "Camden", "Islington", "Hackney") ~ "Inner London",
      destination %in% c("Enfield", "Waltham Forest", "Barnet", "Brent", "Harrow", "Ealing", "Hounslow", "Hillingdon",
                             "Richmond upon Thames", "Kingston upon Thames", "Merton", "Sutton",
                             "Waltham Forest", "Redbridge", "Barking and Dagenham", "Havering", "Greenwich", 
                             "Bexley", "Bromley", "Croydon") ~ "Outer London",
      TRUE ~ NA_character_),
    home_work = paste(home_cat, work_cat, sep = "-")) -> boros

boros |> 
  filter(tick == 0) |> 
  group_by(home_cat, work_cat) |> 
  summarise(n = n(),
            per = n/7043 * 100)



boros |> 
  group_by(home_work, dt_year,where) |> 
  summarise(no2 = mean(no2, na.rm = T)) |> 
  pivot_wider(names_from = where, values_from = no2) |> 
  mutate(diff = Work - Home)
    
    
boros |> 
  group_by(date, dt_year, dt_month, home_work, where) |> 
  summarise(no2 = mean(no2, na.rm = T)) |> 
  mutate(ym = paste(dt_year, dt_month, sep = "_")) |> 
  group_by(where, home_work, date = floor_date(date, "month")) %>%
  summarise(mean_no2 = mean(no2, na.rm = TRUE)) %>%
  ggplot(aes(date, mean_no2, colour = home_work)) +
  geom_line( size = .5) +
  #geom_hline(yintercept=40, linetype = "dotted", alpha = .5) +
  labs(x="", y="NO2 Exposure") +
  facet_wrap(where~.) +
  scale_x_date(date_labels = "%b\n%Y") +
  theme_bw() +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        legend.text=element_text(size=7),
        text = element_text(size=15),
        axis.text.x = element_text(size = 8),
        legend.margin=margin(t=-20)) 


ggsave("Where.jpg", width = 9, height = 4)


results |> 
  mutate(dt_month= month(date),
         dt_year = year(date)) |> 
  mutate(
    home_cat = case_when(
      origin %in% c("Camden", "Kensington and Chelsea", "Islington", "Lambeth", "Southwark", "Westminster") ~ "Central",
      origin %in% c("Barking and Dagenham", "Bexley", "Greenwich", "Hackney", "Havering", "Lewisham", "Newham", "Redbridge", "Tower Hamlets", "Waltham Forest") ~ "East",
      origin %in% c("Barnet", "Enfield", "Haringey") ~ "North",
      origin %in% c("Bromley", "Croydon", "Kingston upon Thames", "Merton", "Sutton", "Wandsworth") ~ "South",
      origin %in% c("Brent", "Ealing", "Hammersmith and Fulham", "Harrow", "Richmond upon Thames", "Hillingdon", "Hounslow") ~ "West",
      TRUE ~ NA_character_),
    
    work_cat = case_when(
      destination %in% c("Camden", "Kensington and Chelsea", "Islington", "Lambeth", "Southwark", "Westminster") ~ "Central",
      destination %in% c("Barking and Dagenham", "Bexley", "Greenwich", "Hackney", "Havering", "Lewisham", "Newham", "Redbridge", "Tower Hamlets", "Waltham Forest") ~ "East",
      destination %in% c("Barnet", "Enfield", "Haringey") ~ "North",
      destination %in% c("Bromley", "Croydon", "Kingston upon Thames", "Merton", "Sutton", "Wandsworth") ~ "South",
      destination %in% c("Brent", "Ealing", "Hammersmith and Fulham", "Harrow", "Richmond upon Thames", "Hillingdon", "Hounslow") ~ "West",
      TRUE ~ NA_character_),
    home_work = paste(home_cat, work_cat, sep = "-")) -> boros

boros |> 
  filter(tick == 0) |> 
  summarise(n = n())

boros |> 
  filter(tick == 0) |> 
  group_by(home_cat, work_cat) |> 
  summarise(n = n(),
            per = n/7043 * 100)


boros |> 
  group_by(home_work, dt_year,where) |> 
  summarise(no2 = mean(no2, na.rm = T)) |> 
  pivot_wider(names_from = where, values_from = no2) |> 
  mutate(diff = Work - Home)


label_data <- boros %>%
  group_by(where, home_work) %>%
  summarise(date = max(date), mean_no2 = mean(no2, na.rm = TRUE)) %>%
  ungroup()


boros |> 
  group_by(date, dt_year, dt_month, home_work, where) |> 
  summarise(no2 = mean(no2, na.rm = TRUE)) |> 
  mutate(ym = paste(dt_year, dt_month, sep = "_")) |> 
  group_by(where, home_work, date = floor_date(date, "month")) %>%
  summarise(mean_no2 = mean(no2, na.rm = TRUE)) %>%
  ggplot(aes(date, mean_no2, color = home_work)) +  # Color by home/work instead of where
  geom_line(size = 1) +  # Increase line size
  labs(x="", y="Mean NO2") +
  facet_wrap(~where, ncol = 3) +  # Change facets to wrap by 'where'
  scale_x_date(date_labels = "%b\n%Y") +
  theme_minimal(base_size = 14) +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        legend.text=element_text(size=10),
        axis.text.x = element_text(size = 10, angle = 45, hjust = 1),  # Adjust text size and angle
        legend.margin=margin(t=-20),
        strip.text.x = element_text(size = 15))  # Adjust facet label size

ggsave("Where2.jpg", width = 9, height = 5)
```




```{r}
# overall
results |> 
  group_by(where, road) %>%
  summarise(no2 = mean(no2, na.rm = TRUE)) |> 
  pivot_wider(names_from = road, values_from = no2)

# by month
results |> 
  group_by(road, where, date = floor_date(date, "quarter")) %>%
  summarise(no2 = mean(no2, na.rm = TRUE)) |> 
pivot_wider(names_from = road, values_from = no2)|> 
  print(n = 24)



results |> 
  group_by(where, road, date = floor_date(date, "month")) %>%
  summarise(no2 = mean(no2, na.rm = TRUE)) |> 
  pivot_wider(names_from = where, values_from = no2) |> 
  mutate(per = Work/Home,
         per1 = if_else(per > 1, per - 1, 1 - per)) 
# Plot
results |> 
  group_by(where, road, date = floor_date(date, "month")) %>%
  summarise(no2 = mean(no2, na.rm = TRUE)) |> 
  mutate(road = if_else(road == "TRUE", "Road", "Background")) |> 
  ggplot(aes(date, no2, colour = road)) +
  geom_line( size = 1.5) +
  labs(x="", y="Mean NO2") +
  facet_wrap(where~.) +
  scale_x_date(date_labels = "%b\n%Y") +
  theme_bw() +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        legend.text=element_text(size=15),
        text = element_text(size=15),
        axis.text.x = element_text(size = 8),
        legend.margin=margin(t=-20)) 

ggsave("is road.jpg", width = 9, height = 4)

```


## Borough Disparities



```{r}
results |> 
  summarise(no2 = mean(no2, na.rm = T))
##39.3 µg/m3


results |> 
  group_by(origin) |> 
  summarise(no2 = mean(no2, na.rm = T)) -> boro_home_no2


boro_home_no2 |> 
  mutate(ratio = no2/39.3) |> 
  mutate(mycolor = ifelse(ratio >= 1, "Above city average", "Below city average")) |> 
  ggplot() + 
  #geom_segment(aes(x=reorder(origin, ratio), xend=origin, y=1, yend=ratio), color = mycolor) +
  geom_segment(aes(x=reorder(origin, ratio), xend=origin, y=1, yend=ratio, color=mycolor), size=1.3, alpha=0.9) +
  theme_minimal() +
  labs(x = "", y = "Relative Disparity", title = "Relative NO2 Disparities at Home Hours") +
  coord_flip() + # Flips the coordinates to make the chart horizontal; useful for readability with many categories
  ylim(0.7,1.3) +
  theme(legend.position = "bottom",
        legend.title = element_blank()) # Adjust text angle and justification if kept vertical

ggsave("no2_IMD_home.jpg", width = 7, height = 5)



results |> 
  group_by(destination) |> 
  summarise(no2 = mean(no2, na.rm = T)) -> boro_work_no2



boro_work_no2 |> 
  mutate(ratio = no2/39.3) |> 
  mutate(mycolor = ifelse(ratio >= 1, "Above city average", "Below city average")) |> 
  ggplot() + 
  geom_segment( aes(x=reorder(destination, ratio), xend=destination, y=1, yend=ratio, color=mycolor), size=1.3, alpha=0.9) +
  theme_minimal() +
  labs(x = "", y = "Relative Disparity", title = "Relative NO2 Disparities at Work Hours") +
  coord_flip() + # Flips the coordinates to make the chart horizontal; useful for readability with many categories
  ylim(0.7,1.3) +
  theme(legend.position = "bottom",
        legend.title = element_blank()) # Adjust text angle and justification if kept vertical

ggsave("no2_IMD_work.jpg", width = 7, height = 5)
```


```{r}
library(sf)

london <- read_sf("../Data/London_Boundary_cleaned.shp")

london |> 
  left_join(boro_home_no2, by = c("NAME" = "origin")) |> 
  mutate(ratio = no2/39.3) |> 
  ggplot() +
  geom_sf(aes(fill = ratio)) +
  coord_sf(crs = 27700) +
  scale_fill_viridis_c() +
  theme_minimal()


london |> 
  left_join(boro_home_no2, by = c("NAME" = "origin")) |> 
  ggplot() +
  geom_sf(aes(fill = no2)) +
  geom_sf_label( aes(label = NAME), size = 3, alpha = .4) +
  coord_sf(crs = 27700) +
  scale_fill_viridis_c() +
  theme_minimal()

```


```{r}
library(gghighlight)

# Assuming 'results1' is your dataset
results1 <- results %>%
  group_by(origin, date = floor_date(date, "quarter")) %>%
  summarise(no2 = mean(no2, na.rm = TRUE))

# Calculate overall average NO2 by origin
average_no2_by_origin <- results1 %>%
  group_by(origin) %>%
  summarise(overall_avg_no2 = mean(no2))

# Identify origins with max and min average NO2
max_origin <- average_no2_by_origin %>%
  filter(overall_avg_no2 == max(overall_avg_no2)) %>%
  pull(origin)

min_origin <- average_no2_by_origin %>%
  filter(overall_avg_no2 == min(overall_avg_no2)) %>%
  pull(origin)

# Add a column to mark max, min, and other origins
results1$highlight <- ifelse(results1$origin %in% max_origin, "Maximum",
                             ifelse(results1$origin %in% min_origin, "Minimum", "Other"))


label_positions <- results1 %>%
  arrange(date) %>%
  group_by(origin) %>%
  filter(date == max(date)) %>%
  ungroup()

# Filter only for maximum and minimum labels
label_positions <- label_positions %>%
  filter(highlight %in% c("Maximum", "Minimum"))


# Plot
ggplot(results1, aes(x = date, y = no2, group = origin)) +
  geom_line(aes(color = highlight), size = 1) +  # Line size for all origins
  geom_point(size = 2.5, aes(color = highlight)) +
  #geom_text(data = label_positions, aes(label = origin, y = no2 + 2), hjust = 1.1, vjust = 1.5, size = 5, color = "black") +
  scale_color_manual(values = c("Maximum" = "red", "Minimum" = "blue", "Other" = "grey")) +
  labs(x = "", y = "Mean NO2") +
  scale_x_date(date_labels = "%b\n%Y") +
  theme_bw() +
  theme(text = element_text(size = 15),
        #axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")  # Adjust or remove to display legend

ggsave("disparity_abs.jpg", width = 6, height = 4)


results1 |> 
  filter(origin %in% c("Lambeth", "Havering")) |> 
  select(-highlight) |> 
  pivot_wider(names_from = origin, values_from = no2) |> 
  mutate(abs_diff = (Lambeth - Havering),
         pdiff_to_city_mean = (Lambeth - Havering)/39.3 * 100,
         relative_disparity = Lambeth/Havering)




```


```{r}
results1 |> 
  filter(origin %in% c("Lambeth", "Havering")) |> 
  select(-highlight) |> 
  pivot_wider(names_from = origin, values_from = no2) |> 
  mutate(`Absolute difference` = (Lambeth - Havering),
         `Percent absolute difference` = (Lambeth - Havering)/39.3 * 100,
         `Relative disparity` = Lambeth/Havering) |> 
  select(-c(Havering, Lambeth)) |> 
  pivot_longer(!date, names_to = "var", values_to = "value") |> 
  mutate(where = "Home") -> disparity_home


# Assuming 'results2' is your dataset
results2 <- results %>%
  group_by(destination, date = floor_date(date, "quarter")) %>%
  summarise(no2 = mean(no2, na.rm = TRUE))

# Calculate overall average NO2 by destination
average_no2_by_destination <- results2 %>%
  group_by(destination) %>%
  summarise(overall_avg_no2 = mean(no2))



results2 |> 
  filter(destination %in% c("Lambeth", "Havering")) |> 
  pivot_wider(names_from = destination, values_from = no2) |> 
  mutate(abs_diff = (Lambeth - Havering),
         pdiff_to_city_mean = (Lambeth - Havering)/39.3 * 100,
         relative_disparity = Lambeth/Havering)



results2 |> 
  filter(destination %in% c("Lambeth", "Havering")) |> 
  pivot_wider(names_from = destination, values_from = no2) |> 
  mutate(`Absolute difference` = (Lambeth - Havering),
         `Percent absolute difference` = (Lambeth - Havering)/39.3 * 100,
         `Relative disparity` = Lambeth/Havering) |> 
  select(-c(Havering, Lambeth)) |> 
  pivot_longer(!date, names_to = "var", values_to = "value") |> 
  mutate(where = "Work") -> disparity_work

disparity_tbl <- bind_rows(disparity_home, disparity_work)



```


```{r}
disparity_tbl |> 
  ggplot() +
  geom_line(aes(x = date, y = value, color = var, linetype = where), size = 1) +
  facet_wrap(~var, scales = "free", ncol = 4) +
  labs(x = "", y = "Absolute and Relative Differences in NO2") +
  scale_x_date(date_labels = "%b\n%Y") +
  theme_bw() +
  theme(text = element_text(size = 15),
        legend.position = "none",
        axis.title.y = element_text(size = 10))

ggsave("disparity_abs-relav.jpg", width = 9, height = 4)
```


## Quantifying Disparities in H and W


```{r}
boros |> 
  group_by(date = floor_date(date, "month")) %>%
  summarise(monthly_no2 = mean(no2, na.rm = TRUE)) -> monthly_no2

boros |> 
  group_by(home_cat, work_cat, date = floor_date(date, "month")) %>%
  summarise(no2 = mean(no2, na.rm = TRUE)) |>
  left_join(monthly_no2, by = "date") |>
  mutate(disparity = no2 / monthly_no2) |> 
  ggplot() +
  geom_line(aes(x = date, y = disparity, color = work_cat), size = .6) +
  facet_wrap(~home_cat, ncol = 3) +
  #facet_grid(vars(home_cat),vars(work_cat)) +
  ylim(0.7, 1.4) +
  labs(x = "", y = "Disparity") +
  scale_x_date(date_labels = "%b\n%Y") +
  theme_bw() +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        legend.text=element_text(size=10),
        axis.text.x = element_text(size = 10),
        legend.margin=margin(t=-20),
        strip.text.x = element_text(size = 15)) 

# boros |> 
#   group_by(home_cat, work_cat, where, date = floor_date(date, "month")) %>%
#   summarise(no2 = mean(no2, na.rm = TRUE)) |>
#   left_join(monthly_no2, by = "date") |>
#   mutate(disparity = no2 / monthly_no2) |> 
#   #mutate(work_cat = paste0("Heading ", work_cat)) |> 
#   ggplot() +
#   geom_line(aes(x = date, y = disparity, color = work_cat, linetype = where), size = .6) +
#   facet_wrap(~home_cat, ncol = 3) +
#   ylim(0.7, 1.4) +
#   labs(x = "", y = "Disparity") +
#   scale_x_date(date_labels = "%b\n%Y") +
#   theme_bw() +
#   theme(legend.position = "bottom",
#         legend.title = element_blank(),
#         legend.text=element_text(size=10),
#         axis.text.x = element_text(size = 10),
#         legend.margin=margin(t=-20),
#         strip.text.x = element_text(size = 15)) 

ggsave("disparity_by_state_mean.jpg", width = 9, height = 5)
```

```{r}
boros |> 
  group_by(home_cat, work_cat, road, date = floor_date(date, "month")) %>%
  summarise(no2 = mean(no2, na.rm = TRUE)) |>
  left_join(monthly_no2, by = "date") |>
  mutate(disparity = no2 / monthly_no2) |> 
  mutate(road = if_else(road == "TRUE", "Road", "Background")) |> 
  ggplot() +
  geom_line(aes(x = date, y = disparity, color = work_cat, linetype = road), size = .6) +
  #facet_wrap(~home_cat, ncol = 3) +
  facet_grid(vars(home_cat), vars(work_cat)) +
  #ylim(0.7, 1.4) +
  labs(x = "", y = "Disparity") +
  scale_x_date(date_labels = "%b\n%Y") +
  theme_bw() +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        legend.text=element_text(size=10),
        axis.text.x = element_text(size = 10),
        legend.margin=margin(t=-20),
        strip.text.x = element_text(size = 15)) 

boros |> 
  group_by(home_cat, work_cat, where, road, date = floor_date(date, "month")) %>%
  summarise(no2 = mean(no2, na.rm = TRUE)) |>
  left_join(monthly_no2, by = "date") |>
  mutate(disparity = no2 / monthly_no2) |> 
  #mutate(work_cat = paste0("Heading ", work_cat)) |> 
  mutate(road = if_else(road == "TRUE", "Road", "Background")) |> 
  ggplot() +
  geom_line(aes(x = date, y = disparity, color = work_cat, linetype = where), size = .6) +
  facet_grid(vars(home_cat), vars(road)) +
  ylim(0.7, 1.5) +
  labs(x = "", y = "Disparity") +
  scale_x_date(date_labels = "%b\n%Y") +
  theme_bw() +
  theme(#legend.position = "bottom",
        legend.title = element_blank(),
        legend.text=element_text(size=8),
        axis.text.x = element_text(size = 10),
        legend.margin=margin(t=-20),
        strip.text.x = element_text(size = 15),
        panel.spacing = unit(1, "lines")) 

ggsave("disparity_ratio_road.jpg", width = 7, height = 7)

```


## Policy Standard

```{r}


```



